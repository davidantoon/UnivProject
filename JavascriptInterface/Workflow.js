/**
 * Workflow class managing inner Tabs
 * @class Workflow
 * @constructor
 * @param {[type]} tempJson [description]
 * @param {[type]} id       [description]
 * @param {[type]} fx       [description]
 * @param {[type]} fy       [description]
 * @param {[type]} tx       [description]
 * @param {[type]} ty       [description]
 * @param {[type]} colored  [description]
 */
function Workflow(tempJson, id, fx, fy, tx, ty, colored){
    /**
     * Holding workflow id
     * @protected
     */
    this.ID;
    /**
     * Holding workflow starting index x
     * @protected
     */
    this.fx;
    /**
     * Holding workflow starting index y
     * @protected
     */
    this.fy;
    /**
     * Holding workflow ending index x
     * @protected
     */
    this.tx;
    /**
     * Holding workflow ending index y
     * @protected
     */
    this.ty;
    /**
     * Holding workflow name
     * @protected
     */
    this.name;
    /**
     * Holding workflow tabs ID
     * @protected
     */
    this.tabsIds;
    /**
     * Holding workflow tabs
     * @protected
     */
    this.tabs;
    /**
     * Holding workflow selected tab
     * @protected
     */
    this.selectedTab;
}
/**
 * Get Array Diffrenece helper function
 * @param  {Array} before 
 * @param  {Array} after
 */
Workflow.getDiffArrays = function(before,after) {}

Workflow.prototype = {

    /**
     * Update current object with new content
     * @param  {object} tempJson Workflow object generated by toJson method
     */
    /**
     * Update current object with new content  
     * @param  {Object} tempJson 
     * @param  {Boolean} colored 
     */
    updateAllParams:  function(tempJson, colored){},

    /**
     * Override "==" operator to compare between object <br><b>Return</b> True if two objects are equals
     * @param  {object} obj Workflow object
     */
    equals: function(obj){},

    /**
     * Initialize new Tab object and push it to workflow tabs array
     */
    addTab: function(){},

    /**
     * Scrolls to a specific location on the screen.
     */
    scrollTo: function(){},

    /**
     * Gets the position of the Workflow<br> <b>Return</b> The position if the Workflow
     */
    getPosition: function(){},

    /**
     * Override toString default function to return json stringify<br> <b>Return</b> Json stringify string
     */
    toString: function(){},

    /**
     * Creates Json <br> <b>Return</b> Json object
     */
    toJson:function(){},

    /**
     * Modify corrent selected tab
     * @param  {Tab} tab  
     */
    selectTab: function(tab) {},
    
    /**
     * Creates Json Steps <br> <b>Return</b> Json object
     */
    toJsonSteps: function(){},

    /**
     * Gets the selected tab index <br> <b>Returns</b> selected tab index
     * @param  {Object} workflow
     */
    getSelectedTabIndex: function(workflow){},

    /**
     * Close specific tab
     * @param  {Object} workflow
     */
    closeTab: function(workflow){}
};
